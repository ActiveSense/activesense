# PowerShell script for creating a Windows installer
# This script checks each step thoroughly and uses direct paths

# Get current directory where the script is located
$ScriptDir = $PSScriptRoot
Write-Host "Script directory: $ScriptDir" -ForegroundColor Cyan

# Create app directory for build output
$AppDir = Join-Path -Path $ScriptDir -ChildPath "app"
Write-Host "App directory: $AppDir" -ForegroundColor Cyan

# Create app directory if it doesn't exist
if (!(Test-Path $AppDir)) {
    Write-Host "Creating app directory..." -ForegroundColor Cyan
    New-Item -ItemType Directory -Path $AppDir -Force | Out-Null
} else {
    Write-Host "Cleaning app directory..." -ForegroundColor Cyan
    Remove-Item -Path "$AppDir\*" -Force -Recurse -ErrorAction SilentlyContinue
}

# Verify app directory exists and is empty
if (!(Test-Path $AppDir)) {
    Write-Host "Failed to create app directory!" -ForegroundColor Red
    exit 1
}

# Get project directory (parent of script directory)
$ProjectDir = Split-Path -Parent $ScriptDir | Split-Path -Parent
$ProjectPath = Join-Path -Path $ProjectDir -ChildPath "ActiveSense.Desktop.csproj"
Write-Host "Project path: $ProjectPath" -ForegroundColor Cyan

# Check if project file exists
if (!(Test-Path $ProjectPath)) {
    Write-Host "Project file not found at: $ProjectPath" -ForegroundColor Red
    exit 1
}

# Build the application
Write-Host "Building application..." -ForegroundColor Cyan
$buildCommand = "dotnet publish `"$ProjectPath`" -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true -o `"$AppDir`""
Write-Host "Running: $buildCommand" -ForegroundColor Gray
Invoke-Expression $buildCommand

# Check if build was successful
$ExePath = Join-Path -Path $AppDir -ChildPath "ActiveSense.Desktop.exe"
if (!(Test-Path $ExePath)) {
    Write-Host "Build failed! Executable not found at: $ExePath" -ForegroundColor Red
    exit 1
}
Write-Host "Build successful. Executable found at: $ExePath" -ForegroundColor Green

# Show content of the app directory
Write-Host "Contents of app directory:" -ForegroundColor Cyan
Get-ChildItem -Path $AppDir -Force | Format-Table Name, Length

# Create Inno Setup script directly in script
$InnoScriptPath = Join-Path -Path $ScriptDir -ChildPath "installer.iss"
Write-Host "Creating Inno Setup script at: $InnoScriptPath" -ForegroundColor Cyan

$InnoScriptContent = @"
; Inno Setup Script for ActiveSense
; Generated by package.ps1

#define MyAppName "ActiveSense"
#define MyAppVersion "1.0.0"
#define MyAppPublisher "Ostschweizer Fachhochschule"
#define MyAppURL "https://www.ost.ch/"
#define MyAppExeName "ActiveSense.Desktop.exe"

[Setup]
; Basic application information
AppId={{A1B2C3D4-E5F6-4A5B-8C9D-1A2B3C4D5E6F}}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
DefaultGroupName={#MyAppName}
AllowNoIcons=yes
; Require administrative rights to install
PrivilegesRequired=admin
; Compress the output
Compression=lzma
SolidCompression=yes
; Create an output EXE in the current directory
OutputDir=$($ScriptDir.Replace('\', '\\'))
OutputBaseFilename=ActiveSense-Setup

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked; OnlyBelowVersion: 6.1; Check: not IsAdminInstallMode

[Files]
; Include all files from the app directory
Source: "$($AppDir.Replace('\', '\\'))\\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs

[Icons]
; Create Start Menu shortcuts
Name: "{group}\\{#MyAppName}"; Filename: "{app}\\{#MyAppExeName}"
Name: "{group}\\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"
; Create Desktop shortcut if selected
Name: "{autodesktop}\\{#MyAppName}"; Filename: "{app}\\{#MyAppExeName}"; Tasks: desktopicon

[Run]
; Option to launch the application after installation
Filename: "{app}\\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent
"@

# Write script to file
Set-Content -Path $InnoScriptPath -Value $InnoScriptContent

# Check if Inno Setup script was created successfully
if (!(Test-Path $InnoScriptPath)) {
    Write-Host "Failed to create Inno Setup script at: $InnoScriptPath" -ForegroundColor Red
    exit 1
}
Write-Host "Inno Setup script created successfully." -ForegroundColor Green

# Check if Inno Setup is installed
function Find-InnoSetup {
    try {
        $innoCompiler = (Get-Command "iscc.exe" -ErrorAction Stop).Source
        return $innoCompiler
    } catch {
        # Try to find Inno Setup in the default installation directory
        $defaultPaths = @(
            "${env:ProgramFiles(x86)}\Inno Setup 6\ISCC.exe",
            "${env:ProgramFiles}\Inno Setup 6\ISCC.exe",
            "${env:ProgramFiles(x86)}\Inno Setup 5\ISCC.exe",
            "${env:ProgramFiles}\Inno Setup 5\ISCC.exe"
        )
        
        foreach ($path in $defaultPaths) {
            if (Test-Path $path) {
                return $path
            }
        }
        
        return $null
    }
}

$InnoCompiler = Find-InnoSetup
if ($null -eq $InnoCompiler) {
    Write-Host "Inno Setup not found. Please install Inno Setup from: https://jrsoftware.org/isdl.php" -ForegroundColor Yellow
    
    # Create a simple ZIP as fallback
    Write-Host "Creating a ZIP package as fallback..." -ForegroundColor Cyan
    $ZipPath = Join-Path -Path $ScriptDir -ChildPath "ActiveSense-Windows.zip"
    Compress-Archive -Path "$AppDir\*" -DestinationPath $ZipPath -Force
    Write-Host "ZIP package created at: $ZipPath" -ForegroundColor Green
    exit 0
}

Write-Host "Inno Setup found at: $InnoCompiler" -ForegroundColor Green

# Compile the installer
Write-Host "Compiling installer using Inno Setup..." -ForegroundColor Cyan
$CompileCommand = "& `"$InnoCompiler`" `"$InnoScriptPath`""
Write-Host "Running: $CompileCommand" -ForegroundColor Gray

# Run Inno Setup compiler and capture output
$CompileOutput = Invoke-Expression "& `"$InnoCompiler`" `"$InnoScriptPath`" 2>&1"
$ExitCode = $LASTEXITCODE

# Display compile output
Write-Host "Compiler output:" -ForegroundColor Yellow
$CompileOutput | ForEach-Object { Write-Host $_ }

# Check compilation result
$InstallerPath = Join-Path -Path $ScriptDir -ChildPath "ActiveSense-Setup.exe"
if ($ExitCode -eq 0 -and (Test-Path $InstallerPath)) {
    Write-Host "Installer successfully created at: $InstallerPath" -ForegroundColor Green
} else {
    Write-Host "Installer compilation failed with exit code: $ExitCode" -ForegroundColor Red
    
    # Create a ZIP file as fallback
    Write-Host "Creating a ZIP package as fallback..." -ForegroundColor Cyan
    $ZipPath = Join-Path -Path $ScriptDir -ChildPath "ActiveSense-Windows.zip"
    Compress-Archive -Path "$AppDir\*" -DestinationPath $ZipPath -Force
    Write-Host "ZIP package created at: $ZipPath" -ForegroundColor Green
}